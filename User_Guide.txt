iNTRUDER v1.5 – Deployment & Usage Guide

1. System Requirements

Requirement	Details
OS	Linux (Ubuntu, Kali Linux preferred)
Python Version	3.8+
Backend	Python with Flask (Flask-CORS, Flask-SocketIO, eventlet recommended)
Core Dependencies	Aircrack-ng suite, macchanger, wireless-tools, iproute2, net-tools, xdg-utils. (See `install.sh` for a more comprehensive list for automated setup).
UI	Modern Web Browser. CRITICAL: `cyber_hud.js` needs manual update (see details below and in README.md).

---

2. Initial Setup

A. Obtain Project Files
   - Clone the repository or download and extract the project archive.
   - `cd iNTRUDER_PROJECT_ROOT`

B. Install System Dependencies
   Run (or adapt for your package manager):
   `sudo apt update && sudo apt install -y aircrack-ng macchanger net-tools python3 python3-pip python3-venv unzip curl xdg-utils hostapd dnsmasq reaver sslstrip`
   (Note: `hostapd`, `dnsmasq`, etc., are for advanced plugins which might still be under active development or require specific hardware/setup.)
   Alternatively, run the provided `./install.sh` script (as root) which attempts to automate this and other setup steps.

C. Install Python Dependencies
   From the project root, ideally using a Python virtual environment:
   ```bash
   python3 -m venv venv
   source venv/bin/activate  # On Windows use `venv\Scripts\activate`
   pip install --upgrade pip
   pip install -r requirements.txt
   ```

D. Make Scripts Executable
   The `install.sh` script handles this. If setting up manually, ensure necessary scripts are executable:
   `chmod +x install.sh start-mon.sh`
   (Other scripts like `scan.sh` are legacy or not intended for direct user execution.)

E. Configure iNTRUDER
   Review and edit `backend/config.py` to match your environment and preferences (e.g., default interface, log paths, feature flags). Many settings can also be overridden by environment variables (see comments in `config.py`). See README.md for more details.

---

3. Project Structure Overview

iNTRUDER_PROJECT_ROOT/
├── backend/
│   ├── __init__.py
│   ├── server.py                 # Main Flask server application
│   ├── config.py                 # Core configuration settings
│   ├── deauth_attack.py          # Deauth attack logic
│   ├── handshake_capture_module.py # Handshake capture logic
│   ├── wifi_cracker_module.py    # WPA/WPA2 cracking logic
│   ├── core/
│   │   ├── __init__.py
│   │   ├── event_logger.py       # For session_events.jsonl
│   │   └── network_utils.py      # Interface state checking (exists, monitor mode)
│   ├── plugins/
│   │   ├── __init__.py
│   │   ├── opsec_utils.py        # MACChanger utility
│   │   ├── scanner.py            # AdaptiveScanner (airodump-ng based)
│   │   ├── rogue_ap.py           # Rogue AP module
│   │   ├── mitm.py               # MITM proxy placeholder (not fully implemented)
│   │   └── wps_attack.py         # WPS attack module
│   └── reporting.py              # ReportGenerator class
├── index.html                    # Main dashboard HTML file (root directory)
├── cyber_hud.css                 # Main dashboard CSS (root directory)
├── cyber_hud.js                  # Main dashboard JavaScript (root directory) - CRITICAL: Needs review/sync with backend APIs.
├── captures/                     # Default directory for handshake captures (see config.py)
├── reports/                      # Default directory for generated JSON/Markdown reports (see config.py)
├── logs/                         # Default directory for log files (see config.py)
│   ├── intruder.log              # Default main application log file
│   └── session_events.jsonl      # Default structured event log file
├── start-mon.sh                  # Script to enable monitor mode (reviewed and updated)
├── install.sh                    # Installer script (reviewed and updated)
├── requirements.txt              # Python package dependencies
├── README.md
├── User_Guide.txt
└── PRODUCTION_CHECKLIST.md       # For deployment and operational checks (may need updates)
(Other files like `scan.sh`, `index_old.html`, etc., are legacy or examples and should be reviewed for removal.)

---

4. Launch the Tool

A. Start the Backend API
   From the project's root directory (iNTRUDER_PROJECT_ROOT), after activating the virtual environment:
   `sudo python3 -m backend.server`
   (Use `sudo` as most WiFi operations require root privileges.)

   You should see log output indicating the server has started, e.g.:
   `* Running on http://0.0.0.0:5000/` (or your configured port)
   Followed by configuration validation messages from `config.py` if run directly.

B. Open Dashboard
   1. Open a modern web browser.
   2. Navigate to: `http://localhost:5000` (or as configured).
   3. **CRITICAL UI ALIGNMENT**: The main dashboard JavaScript (`cyber_hud.js`) interacts with backend API endpoints defined in `backend/server.py`. Significant refactoring of Python modules has occurred. **Crucially, `cyber_hud.js` and the API endpoint implementations in `backend/server.py` must be thoroughly reviewed and synchronized to ensure UI functionality.** Without this, the UI may not function as intended.

---

5. Functional Panels – What They Do (after `cyber_hud.js` / API alignment)

Panel / Button	Purpose & Interaction

Start Monitor Mode
  Input: Interface (e.g., wlan0, optional)
  Action: Enables monitor mode on the specified (or default) wireless interface using the updated `start-mon.sh` script or internal Python logic. Backend verifies.

Scan Networks
  Input: Monitor Interface (e.g., wlan0mon), Duration (seconds)
  Action: Uses `AdaptiveScanner` (airodump-ng) to find and list nearby WiFi networks and clients. Output is JSON.

Capture Handshake
  Input: Monitor Interface, Target SSID (optional), Target BSSID (optional), Channel (optional)
  Action: Uses `HandshakeCapture` (airodump-ng) to capture WPA/WPA2 handshake packets for a specific target.

Deauth Attack
  Input: Monitor Interface, Target BSSID (required), Client MAC (optional, default broadcast), Count (optional, default 10)
  Action: Performs a deauthentication attack using `DeauthAttack` (aireplay-ng).

Crack Handshake
  Input: Path to .cap file (handshake capture), Path to wordlist (optional if default set in config)
  Action: Attempts to crack the handshake using `WifiCracker` (aircrack-ng).

Generate Reports (via API call, UI button may not exist yet or be a stub)
  API: `POST /api/reporting/generate`
  Action: Processes `session_events.jsonl` to create JSON and Markdown summary reports in the `reports/` directory.

---

6. Troubleshooting Tips

Issue	Fix

UI Buttons Not Working / Errors	**CRITICAL**: As stated above, `cyber_hud.js` (frontend) and `backend/server.py` (backend API endpoints) must be synchronized. Check browser developer console (F12) for errors.
"ModuleNotFoundError" / "ImportError"	Ensure you have activated the Python virtual environment (`source venv/bin/activate`) and are running `sudo python3 -m backend.server` from the project's root directory.
Permission Denied / Tool Errors	Most WiFi operations require root. Run the server with `sudo`. Ensure tools like `aircrack-ng`, `macchanger`, `reaver` are installed and executable by root.
Monitor Mode Not Activating	Verify your wireless card supports monitor mode. Check output of `start-mon.sh` (logged by server). Manually test `sudo ./start-mon.sh <interface>` if needed. Check interface names with `iwconfig` or `ip link`.
No Networks/Clients Found	Ensure monitor mode is active on the correct interface. Check antenna and proximity to APs. Review `AdaptiveScanner` logs via the main application log file (default `logs/intruder.log`).
Log Files	- `logs/intruder.log`: Main application operational log.
	- `logs/session_events.jsonl`: Structured event log for reporting.
	- `reports/`: Contains generated JSON/Markdown reports.
	- `captures/`: Default for handshake .cap files.
	- `wps_sessions/`: Default for WPS attack session files.

---

7. Safe & Legal Use Notice

This tool is for educational & authorized pentesting only.
Do not use on networks without explicit permission.
Always respect privacy and operate within legal boundaries.